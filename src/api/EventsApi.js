/*
 * SignRequest API
 * API for SignRequest.com
 *
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/InlineResponse2004'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/InlineResponse2004'));
  } else {
    // Browser globals (root is window)
    if (!root.SignrequestClient) {
      root.SignrequestClient = {};
    }
    root.SignrequestClient.EventsApi = factory(root.SignrequestClient.ApiClient, root.SignrequestClient.Event, root.SignrequestClient.InlineResponse2004);
  }
}(this, function(ApiClient, Event, InlineResponse2004) {
  'use strict';

  /**
   * Events service.
   * @module api/EventsApi
   * @version 1.1.1
   */

  /**
   * Constructs a new EventsApi. 
   * @alias module:api/EventsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the eventsList operation.
     * @callback module:api/EventsApi~eventsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of Events
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.document__uuid 
     * @param {String} opts.document__external_id 
     * @param {String} opts.document__signrequest__who 
     * @param {String} opts.document__signrequest__from_email 
     * @param {String} opts.document__status 
     * @param {String} opts.document__user__email 
     * @param {String} opts.document__user__first_name 
     * @param {String} opts.document__user__last_name 
     * @param {String} opts.delivered 
     * @param {String} opts.delivered_on 
     * @param {String} opts.timestamp 
     * @param {String} opts.status 
     * @param {String} opts.event_type 
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {Number} opts.limit Number of results to return per page.
     * @param {module:api/EventsApi~eventsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    this.eventsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'document__uuid': opts['document__uuid'],
        'document__external_id': opts['document__external_id'],
        'document__signrequest__who': opts['document__signrequest__who'],
        'document__signrequest__from_email': opts['document__signrequest__from_email'],
        'document__status': opts['document__status'],
        'document__user__email': opts['document__user__email'],
        'document__user__first_name': opts['document__user__first_name'],
        'document__user__last_name': opts['document__user__last_name'],
        'delivered': opts['delivered'],
        'delivered_on': opts['delivered_on'],
        'timestamp': opts['timestamp'],
        'status': opts['status'],
        'event_type': opts['event_type'],
        'page': opts['page'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/events/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsRead operation.
     * @callback module:api/EventsApi~eventsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Event
     * 
     * @param {Number} id A unique integer value identifying this event.
     * @param {module:api/EventsApi~eventsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    this.eventsRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventsRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Event;

      return this.apiClient.callApi(
        '/events/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
